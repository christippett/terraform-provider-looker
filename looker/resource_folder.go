package looker

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	v4 "github.com/looker-open-source/sdk-codegen/go/sdk/v4"
)

func resourceFolder() *schema.Resource {
	return &schema.Resource{
		// This description is used by the documentation generator and the language server.
		Description: "Folders contain Dashboards and Looks for specific groups of people. You can copy, move, or save Dashboards and Looks to a folder.",

		CreateContext: resourceFolderCreate,
		ReadContext:   resourceFolderRead,
		UpdateContext: resourceFolderUpdate,
		DeleteContext: resourceFolderDelete,

		Schema: map[string]*schema.Schema{
			"name": {
				Description: "Folder unique name.",
				Type:        schema.TypeString,
				Required:    true,
			},
			"parent_id": {
				Description: "Parent folder ID. If parent is null, the folder is located at the root-level.",
				Type:        schema.TypeString,
				Optional:    true,
				Default:     1,
			},
			"content_metadata": {
				Description: "Folder content metadata.",
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"inherits": {
							Description: "True if content should inherit its access levels from the parent folder.",
							Type:        schema.TypeBool,
							Required:    true,
						},
					},
				},
			},
			"content_metadata_id": {
				Description: "Content metadata ID.",
				Type:        schema.TypeInt,
				Computed:    true,
			},
			"created_at": {
				Description: "Time the folder was created.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"creator_id": {
				Description: "User ID of creator.",
				Type:        schema.TypeInt,
				Computed:    true,
			},
			"child_count": {
				Description: "Children count.",
				Type:        schema.TypeInt,
				Computed:    true,
			},
			"external_id": {
				Description: "Embedder's ID if the folder was autogenerated as an embedding shared folder via `external_group_id` in an SSO embed login.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"is_embed": {
				Description: "Folder is an embed folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_embed_shared_root": {
				Description: "Folder is the root embed shared folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_embed_users_root": {
				Description: "Folder is the root embed users folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_personal": {
				Description: "Folder is a user's personal folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_personal_descendant": {
				Description: "Folder is descendant of a user's personal folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_shared_root": {
				Description: "Folder is the root shared folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
			"is_users_root": {
				Description: "Folder is the root user folder.",
				Type:        schema.TypeBool,
				Computed:    true,
			},
		},
	}
}

func resourceFolderCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	config := meta.(*Config)
	sdk := config.sdk

	name := d.Get("name").(string)
	parentId := d.Get("parent_id").(string)

	folder, err := sdk.CreateFolder(v4.CreateFolder{
		Name:     name,
		ParentId: parentId,
	}, nil)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(*folder.Id)

	contentMetaBlock := d.Get("content_metadata").([]interface{})
	if len(contentMetaBlock) > 0 {
		inherits := contentMetaBlock[0].(map[string]interface{})["inherits"].(bool)
		_, err := sdk.UpdateContentMetadata(*folder.ContentMetadataId, v4.WriteContentMeta{
			Inherits: &inherits,
		}, nil)
		if err != nil {
			return diag.FromErr(err)
		}
	}

	return resourceFolderRead(ctx, d, meta)
}

func resourceFolderRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	config := meta.(*Config)
	sdk := config.sdk

	folder, err := sdk.Folder(d.Id(), "", nil)
	if err != nil {
		return diag.FromErr(err)
	}

	if err = folderToResourceData(&folder, d); err != nil {
		return diag.FromErr(err)
	}

	contentMetaBlock := make([]map[string]interface{}, 1)
	contentMeta, err := sdk.ContentMetadata(*folder.ContentMetadataId, "", nil)
	if err != nil {
		return diag.FromErr(err)
	}
	contentMetaBlock[0] = make(map[string]interface{})
	contentMetaBlock[0]["inherits"] = *contentMeta.Inherits

	return nil
}

func resourceFolderUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	config := meta.(*Config)
	sdk := config.sdk

	updateFolder := v4.UpdateFolder{}

	if d.HasChange("name") {
		name := d.Get("name").(string)
		updateFolder.Name = &name
	}

	if d.HasChange("parent_id") {
		parentId := d.Get("parent_id").(string)
		updateFolder.ParentId = &parentId
	}

	_, err := sdk.UpdateFolder(d.Id(), updateFolder, nil)
	if err != nil {
		return diag.FromErr(err)
	}

	if d.HasChange("content_metadata") {
		contentMetaBlock := d.Get("content_metadata").([]interface{})
		contentMetadataId := int64(d.Get("content_metadata_id").(int))
		if len(contentMetaBlock) > 0 {
			_, err := sdk.UpdateContentMetadata(contentMetadataId, v4.WriteContentMeta{
				Inherits: contentMetaBlock[0].(*bool),
			}, nil)
			if err != nil {
				return diag.FromErr(err)
			}
		}
	}

	return resourceFolderRead(ctx, d, meta)
}

func resourceFolderDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	config := meta.(*Config)
	sdk := config.sdk

	_, err := sdk.DeleteFolder(d.Id(), nil)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func folderToResourceData(folder *v4.Folder, d *schema.ResourceData) error {
	d.SetId(*folder.Id)
	d.Set("name", folder.Name)
	d.Set("parent_id", folder.ParentId)
	d.Set("content_metadata_id", folder.ContentMetadataId)
	d.Set("created_at", folder.CreatedAt.Format(time.RFC3339))
	d.Set("creator_id", folder.CreatorId)
	d.Set("child_count", folder.ChildCount)
	d.Set("external_id", folder.ExternalId)
	d.Set("is_embed", folder.IsEmbed)
	d.Set("is_embed_shared_root", folder.IsEmbedSharedRoot)
	d.Set("is_embed_users_root", folder.IsEmbedUsersRoot)
	d.Set("is_personal", folder.IsPersonal)
	d.Set("is_personal_descendant", folder.IsPersonalDescendant)
	d.Set("is_shared_root", folder.IsSharedRoot)
	d.Set("is_users_root", folder.IsUsersRoot)
	return nil
}
